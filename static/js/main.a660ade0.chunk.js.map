{"version":3,"sources":["Todos.js","AddForm.js","App.js","serviceWorker.js","index.js"],"names":["Todos","todos","deleteTodo","todoList","length","map","todo","className","onClick","id","content","AddForm","state","handleChange","event","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","onChange","Component","App","filter","newTodo","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qNAgDeA,EArBD,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAChBC,EAAWF,EAAMG,OACrBH,EAAMI,KAAI,SAAAC,GACR,OACE,yBAAKC,UAAU,mBACb,0BACEC,QAAS,WACPN,EAAWI,EAAKG,MAGjBH,EAAKI,aAMd,uBAAGH,UAAU,UAAb,+BAEF,OAAO,yBAAKA,UAAU,mBAAmBJ,IC0B5BQ,E,2MA7BbC,MAAQ,CACNF,QAAS,I,EAGXG,aAAe,SAAAC,GACb,EAAKC,SAAS,CACZL,QAASI,EAAME,OAAOC,S,EAI1BC,aAAe,SAAAJ,GACbA,EAAMK,iBACN,EAAKC,MAAMC,QAAQ,EAAKT,OACxB,EAAKG,SAAS,CACZL,QAAS,M,wEAIX,OACE,6BACE,0BAAMY,SAAUC,KAAKL,cACnB,4CACA,2BAAOM,SAAUD,KAAKV,aAAcI,MAAOM,KAAKX,MAAMF,gB,GAvB1Ce,aCuCPC,E,2MAlCbd,MAAQ,CACNX,MAAO,CACL,CAAEQ,GAAI,EAAGC,QAAS,iBAClB,CAAED,GAAI,EAAGC,QAAS,qB,EAItBR,WAAa,SAAAO,GACX,IAAMR,EAAQ,EAAKW,MAAMX,MAAM0B,QAAO,SAAArB,GACpC,OAAOA,EAAKG,KAAOA,KAErB,EAAKM,SAAS,CACZd,MAAOA,K,EAIXoB,QAAU,SAAAO,GACRA,EAAQnB,GAAKoB,KAAKC,SAClB,IAAM7B,EAAK,sBAAO,EAAKW,MAAMX,OAAlB,CAAyB2B,IACpC,EAAKb,SAAS,CACZd,MAAOA,K,wEAIT,OACE,yBAAKM,UAAU,iBACb,wBAAIA,UAAU,oBAAd,UACA,kBAAC,EAAD,CAAON,MAAOsB,KAAKX,MAAMX,MAAOC,WAAYqB,KAAKrB,aACjD,kBAAC,EAAD,CAASmB,QAASE,KAAKF,e,GA7BbI,aCjCEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a660ade0.chunk.js","sourcesContent":["// import React from \"react\";\r\n\r\n// const Todos = ({ todos, deleteTodo }) => {\r\n//   const todoList = todos.length ? (\r\n//     todos.map(todo => {\r\n//       return (\r\n//         <div className=\"collection-item\" key={todo.id}>\r\n//           <span\r\n//             onClick={() => {\r\n//               deleteTodo(todo.id);\r\n//             }}\r\n//           >\r\n//             {todo.content}\r\n//           </span>\r\n//         </div>\r\n//       );\r\n//     })\r\n//   ) : (\r\n//     <p className=\"center\">You dont have any todos left.</p>\r\n//   );\r\n//   return <div className=\"todo collection\">{todoList}</div>;\r\n// };\r\n\r\n// export default Todos;\r\n\r\nimport React from \"react\";\r\n\r\nconst Todos = ({ todos, deleteTodo }) => {\r\n  const todoList = todos.length ? (\r\n    todos.map(todo => {\r\n      return (\r\n        <div className=\"collection-item\">\r\n          <span\r\n            onClick={() => {\r\n              deleteTodo(todo.id);\r\n            }}\r\n          >\r\n            {todo.content}\r\n          </span>\r\n        </div>\r\n      );\r\n    })\r\n  ) : (\r\n    <p className=\"center\">You have no more todos left</p>\r\n  );\r\n  return <div className=\"todo collection\">{todoList}</div>;\r\n};\r\n\r\nexport default Todos;\r\n","// import React, { Component } from \"react\";\r\n\r\n// class AddForm extends Component {\r\n//   state = {\r\n//     content: \"\"\r\n//   };\r\n\r\n//   handleChange = event => {\r\n//     this.setState({\r\n//       content: event.target.value\r\n//     });\r\n//   };\r\n\r\n//   handleSubmit = event => {\r\n//     event.preventDefault();\r\n//     this.props.addTodo(this.state);\r\n//     this.setState({\r\n//       content: \"\"\r\n//     });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         <form onSubmit={this.handleSubmit}>\r\n//           <label>Add New todo</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             onChange={this.handleChange}\r\n//             value={this.state.content}\r\n//           />\r\n//         </form>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default AddForm;\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nclass AddForm extends Component {\r\n  state = {\r\n    content: \"\"\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      content: event.target.value\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.addTodo(this.state);\r\n    this.setState({\r\n      content: \"\"\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>Add Todos</label>\r\n          <input onChange={this.handleChange} value={this.state.content} />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddForm;\r\n","// import React, { Component } from \"react\";\n// import Todos from \"./Todos\";\n// import AddForm from \"./AddForm\";\n\n// class App extends Component {\n//   state = {\n//     todos: [\n//       { content: \"buy some milk\", id: 1 },\n//       { content: \"play mario kart\", id: 2 }\n//     ]\n//   };\n\n//   deleteTodo = id => {\n//     const todos = this.state.todos.filter(todo => {\n//       return todo.id !== id;\n//     });\n//     this.setState({\n//       todos: todos\n//     });\n//   };\n\n//   addTodo = newTodo => {\n//     newTodo.id = Math.random();\n//     const todos = [...this.state.todos, newTodo];\n//     this.setState({\n//       todos: todos\n//     });\n//   };\n//   render() {\n//     return (\n//       <div className=\"todo-app container\">\n//         <h1 className=\"center blue-text\">Todo's</h1>\n//         <Todos todos={this.state.todos} deleteTodo={this.deleteTodo} />\n//         <AddForm addTodo={this.addTodo} />\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n\nimport React, { Component } from \"react\";\nimport Todos from \"./Todos\";\nimport AddForm from \"./AddForm\";\n\nclass App extends Component {\n  state = {\n    todos: [\n      { id: 1, content: \"buy some milk\" },\n      { id: 2, content: \"play mario kart\" }\n    ]\n  };\n\n  deleteTodo = id => {\n    const todos = this.state.todos.filter(todo => {\n      return todo.id !== id;\n    });\n    this.setState({\n      todos: todos\n    });\n  };\n\n  addTodo = newTodo => {\n    newTodo.id = Math.random();\n    const todos = [...this.state.todos, newTodo];\n    this.setState({\n      todos: todos\n    });\n  };\n  render() {\n    return (\n      <div className=\"App container\">\n        <h1 className=\"center blue-text\">Todo's</h1>\n        <Todos todos={this.state.todos} deleteTodo={this.deleteTodo} />\n        <AddForm addTodo={this.addTodo} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}